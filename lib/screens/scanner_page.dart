import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:native_code_app/screens/main_page.dart';
import 'package:http/http.dart' as http;

class ScannerPage extends StatefulWidget {
  const ScannerPage({super.key});

  @override
  State<ScannerPage> createState() => _ScannerPageState();
}

class _ScannerPageState extends State<ScannerPage> {
  Barcode? _barcode; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  final MobileScannerController _controller = MobileScannerController();
  bool isLoading = false; // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏

  @override
  void initState() {
    super.initState();
    _controller.start(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  }

  Future<void> _saveTerminalId(String terminalId) async {
    final SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('terminalId', terminalId);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
  Future<void> _verifyTerminal(String terminalId) async {
    setState(() {
      isLoading = true; // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    });

    final SharedPreferences prefs = await SharedPreferences.getInstance();
    final String? token = prefs.getString('token'); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ shared_preferences

    if (token == null) {
      setState(() {
        isLoading = false; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–∫–µ–Ω–∞
      });
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
            content:
                Text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")),
      );
      return;
    }

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PATCH –∑–∞–ø—Ä–æ—Å
      final response = await http.patch(
        Uri.parse('https://flackopay.net/api/terminals/$terminalId/verify'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω—ã–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const MainPage()),
        );
      } else {
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç 200, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
              content: Text(
                  "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")),
        );
      }
    } catch (e) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e")),
      );
    } finally {
      setState(() {
        isLoading = false; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      });
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
  Widget _buildBarcode(Barcode? value) {
    if (value == null) {
      return const Text(
        '–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!',
        overflow: TextOverflow.fade,
        style: TextStyle(color: Colors.white),
      );
    }

    return Text(
      value.rawValue ?? '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.',
      overflow: TextOverflow.fade,
      style: const TextStyle(color: Colors.white),
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  void _handleBarcode(BarcodeCapture barcodes) {
    setState(() {
      _barcode = barcodes.barcodes.firstOrNull;

      if (_barcode != null) {
        // –í—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        print("üî¥ *** SCANNED BARCODE VALUE: ${_barcode!.rawValue} *** üî¥");
      } else {
        print("üî¥ *** SCANNED BARCODE: NULL *** üî¥");
      }
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.black,
        title: const Text(
          '–°–∫–∞–Ω–µ—Ä QR-–∫–æ–¥–∞',
          style: TextStyle(color: Colors.white),
        ),
      ),
      body: Stack(
        alignment: Alignment.center,
        children: [
          MobileScanner(
            controller: _controller,
            fit: BoxFit.cover,
            onDetect: _handleBarcode,
          ),
          Positioned(
            top: 150,
            child: Container(
              width: 250,
              height: 250,
              decoration: BoxDecoration(
                border: Border.all(
                  color: Colors.white,
                  width: 4,
                ),
                borderRadius: BorderRadius.circular(12),
              ),
            ),
          ),
          Positioned(
            top: 20,
            child: Column(
              children: [
                const Text(
                  '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¢–µ—Ä–º–∏–Ω–∞–ª–∞:',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                  textAlign: TextAlign.center,
                ),
                StreamBuilder<BarcodeCapture>(
                  stream: _controller.barcodes,
                  builder: (context, snapshot) {
                    if (snapshot.hasData) {
                      final barcode = snapshot.data!.barcodes.firstOrNull;
                      return _buildBarcode(barcode);
                    } else {
                      return _buildBarcode(null);
                    }
                  },
                ),
              ],
            ),
          ),
          Positioned(
            bottom: 30,
            child: ElevatedButton(
              onPressed: _barcode != null && _barcode?.rawValue != null && !isLoading
                  ? () async {
                      await _saveTerminalId(_barcode!.rawValue!);
                      await _verifyTerminal(_barcode!.rawValue!); // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
                    }
                  : null,
              style: ElevatedButton.styleFrom(
                backgroundColor: _barcode != null && _barcode?.rawValue != null && !isLoading
                    ? const Color(0xFF086AEB)
                    : Colors.grey,
                padding: const EdgeInsets.symmetric(
                  vertical: 15,
                  horizontal: 100,
                ),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              child: isLoading
                  ? const CircularProgressIndicator(
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    )
                  : const Text(
                      '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                      style: TextStyle(color: Colors.white),
                    ),
            ),
          ),
        ],
      ),
    );
  }
}
